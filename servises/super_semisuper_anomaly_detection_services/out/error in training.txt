[adssae:semisup_autoencoder] Accuracy Statistics
{'precision_N': 0.9417091114883984, 'recall_N': 1.0, 'fscore_N': 0.9699795977849024, 'precision_A': 1.0, 'recall_A': 0.02830188679245283, 'precision_W': 0.9451999782580197, 'recall_W': 0.9418079096045198, 'fscore_W': 0.9151869565533326, 'err_threshold': 1.0, 'n_perc': 89}
[adssae:semisup_autoencoder] Saving model and stats
mae: {0: Decimal('0.0178904184919299845402118620540932170115411281585693359375'), 1: Decimal('0.0122905454406656740318215526031053741462528705596923828125'), 2: Decimal('0.419701133631054601469401177382678724825382232666015625'), 3: Decimal('0.08818882019970884778015118854455067776143550872802734375'), 4: Decimal('0.016249888380894202122295411072627757675945758819580078125'), 5: Decimal('0.077388449940837433782547805094509385526180267333984375'), 6: Decimal('0.51410359174014275129849238510360009968280792236328125'), 7: Decimal('0.12194983241474945112603478492019348777830600738525390625'), 8: Decimal('0.1271237296657766469021311195319867692887783050537109375'), 9: Decimal('0.06430916650852581961661513787475996650755405426025390625'), 10: Decimal('0.0852878223169526716862520743234199471771717071533203125'), 11: Decimal('0.043823393161362640679801216947453212924301624298095703125'), 12: Decimal('0.06266962462937746003444061670961673371493816375732421875'), 13: Decimal('0.049911395931726831864949645023443736135959625244140625'), 14: Decimal('0.036039577357610617924787987931267707608640193939208984375'), 15: Decimal('0.07300377321581021095031616141568520106375217437744140625'), 16: Decimal('0.0651904429652143957429899501221370883285999298095703125'), 17: Decimal('0.049627739875895006405048803799218148924410343170166015625'), 18: Decimal('0.07429027106247344802714138722876668907701969146728515625'), 19: Decimal('0.0795946410168326956569018193476949818432331085205078125'), 20: Decimal('0.045466559859352224937101283330775913782417774200439453125'), 21: Decimal('0.1022258430009552743200629265629686415195465087890625'), 22: Decimal('0.10264712529738757862407538823390495963394641876220703125'), 23: Decimal('0.113820927303131258501167621943750418722629547119140625'), 24: Decimal('0.0662270726877707549551388410691288299858570098876953125'), 25: Decimal('0.07978142158228317126766881983712664805352687835693359375'), 26: Decimal('0.1108268952980632493510171343586989678442478179931640625'), 27: Decimal('0.08739459953109855738784261802720720879733562469482421875'), 28: Decimal('0.06701800504663731061771869690346647985279560089111328125'), 29: Decimal('0.01316933635662219381767812365069403313100337982177734375'), 30: Decimal('0.01386977282463548559465760234843401121906936168670654296875'), 31: Decimal('0.100062038360845428908163512460305355489253997802734375'), 32: Decimal('0.11651078976243593732231573767421650700271129608154296875'), 33: Decimal('0.0767229016278883346746653160153073258697986602783203125'), 34: Decimal('0.049575520960681691839955220757474307902157306671142578125'), 35: Decimal('0.046049050812723708869800276488604140467941761016845703125'), 36: Decimal('0.09775246928604787444161416942733922041952610015869140625'), 37: Decimal('0.125659269898094116957310006910120137035846710205078125'), 38: Decimal('0.303484865834573847021005121860071085393428802490234375'), 39: Decimal('0.0884575747165922410264471409391262568533420562744140625'), 40: Decimal('0.0225199435092942497338430740683179465122520923614501953125'), 41: Decimal('0.07496763348890522760115118217072449624538421630859375'), 42: Decimal('0.10707500671453502871788288075549644418060779571533203125'), 43: Decimal('0.1665642117659353049763382159653701819479465484619140625'), 44: Decimal('0.006670101912286727392775720346662637894041836261749267578125'), 45: Decimal('0.01790621779457231277365991672922973521053791046142578125'), 46: Decimal('0.0176642414915709096423501733852390316314995288848876953125'), 47: Decimal('0.006895028708838395192781689502226072363555431365966796875'), 48: Decimal('0.02505275555773665840941788474083296023309230804443359375'), 49: Decimal('0.00104965838390778270529379856412788285524584352970123291015625'), 50: Decimal('0.004190999656475438185643245248002131120301783084869384765625'), 51: Decimal('0.01542997824344440570276670854354961193166673183441162109375'), 52: Decimal('0.0021756555593724948016731701727621839381754398345947265625'), 53: Decimal('0.035841062635978471195841166263562627136707305908203125'), 54: Decimal('0.0216420474063895584837524665999808348715305328369140625'), 55: Decimal('0.00229016374670788953882283323082447168417274951934814453125'), 56: Decimal('0.005095614336425053660095674246122143813408911228179931640625'), 57: Decimal('0.00336163321391765197720946645176809397526085376739501953125'), 58: Decimal('0.1858981856593189541104749196165357716381549835205078125'), 59: Decimal('0.00028627046833848619235285415385305896052159368991851806640625'), 60: Decimal('0.0031489751517233487664026991836863089702092111110687255859375'), 61: Decimal('0.0252490553074544814282642590796967851929366588592529296875'), 62: Decimal('0.0026050612618802241986226686520922157797031104564666748046875'), 63: Decimal('0.009515630367571283054761721587055944837629795074462890625'), 64: Decimal('0.129988461910586716729909539935761131346225738525390625'), 65: Decimal('0.0029543112332531778867206195826611292432062327861785888671875'), 66: Decimal('0.0206114737203710075841289750542273395694792270660400390625'), 67: Decimal('0.00884127455229734814101671958042061305604875087738037109375'), 68: Decimal('0.0026193747852971487576068110314508885494433343410491943359375'), 69: Decimal('0.00513139814496736505755603019451882573775947093963623046875'), 70: Decimal('0.000744303217680064056749333900597775937058031558990478515625'), 71: Decimal('0.004179548837741897497621845758430936257354915142059326171875'), 72: Decimal('0.00841635176915149496590373701110365800559520721435546875'), 73: Decimal('0.00103057368601855024910218805445083489757962524890899658203125'), 74: Decimal('0.035211267605633804478326709386237780563533306121826171875'), 75: Decimal('0.00957574716592236342693755801747101941145956516265869140625'), 76: Decimal('0.005324630711095843134395000362246719305403530597686767578125'), 77: Decimal('0.006526966678117485272381248506690099020488560199737548828125'), 78: Decimal('0.0023187907935417382231102489953400436206720769405364990234375'), 79: Decimal('0.06292746948196385747831271828545141033828258514404296875'), 80: Decimal('0.000515286843009275124551094027225417448789812624454498291015625'), 81: Decimal('0.0030058399175541049112847513669066756847314536571502685546875'), 82: Decimal('0.01059200732852398803285343120705874753184616565704345703125'), 83: Decimal('0.003950532463071109758045995619113455177284777164459228515625'), 84: Decimal('0.007128134661628306341374372578911788878031075000762939453125')}
best score: 0.05786093457399078
  4%|‚ñç         | 22/500 [30:45<11:08:24, 83.90s/trial, best loss: 0.042741064877096106]
job exception: keep_prob must be a scalar tensor or a float in the range (0, 1], got 0
Traceback (most recent call last):
  File "C:/Users/filip/OneDrive/Documenti/Python/IoTwins_Bayesian_Optimization/servises/super_semisuper_anomaly_detection_services/src/prova.py", line 243, in <module>
    max_evals=MAX_EVALS, trials=bayes_trials, rstate=np.random.RandomState(50))
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\fmin.py", line 482, in fmin
    show_progressbar=show_progressbar,
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\base.py", line 686, in fmin
    show_progressbar=show_progressbar,
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\fmin.py", line 509, in fmin
    rval.exhaust()
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\fmin.py", line 330, in exhaust
    self.run(self.max_evals - n_done, block_until_done=self.asynchronous)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\fmin.py", line 286, in run
    self.serial_evaluate()
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\fmin.py", line 165, in serial_evaluate
    result = self.domain.evaluate(spec, ctrl)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\hyperopt\base.py", line 894, in evaluate
    rval = self.fn(pyll_rval)
  File "C:/Users/filip/OneDrive/Documenti/Python/IoTwins_Bayesian_Optimization/servises/super_semisuper_anomaly_detection_services/src/prova.py", line 107, in objective
    ae_model, scaler, ae_stats = semisup_autoencoder(volume_dir + file_name, sep=',', hparams_file=params, save=False)
  File "C:\Users\filip\OneDrive\Documenti\Python\IoTwins_Bayesian_Optimization\servises\super_semisuper_anomaly_detection_services\src\anomalyDetection.py", line 310, in semisup_autoencoder
    ae_model, _ = ae.autoencoder(n_features, hparams)
  File "C:\Users\filip\OneDrive\Documenti\Python\IoTwins_Bayesian_Optimization\servises\super_semisuper_anomaly_detection_services\src\utils\ae_utils.py", line 79, in autoencoder
    hidden = Dropout(rate=_hparams['drop_factor'])(hidden)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\keras\engine\base_layer.py", line 736, in __call__
    outputs = self.call(inputs, *args, **kwargs)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\keras\layers\core.py", line 147, in call
    lambda: array_ops.identity(inputs))
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\keras\utils\tf_utils.py", line 51, in smart_cond
    pred, true_fn=true_fn, false_fn=false_fn, name=name)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\framework\smart_cond.py", line 59, in smart_cond
    name=name)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\util\deprecation.py", line 454, in new_func
    return func(*args, **kwargs)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\ops\control_flow_ops.py", line 2048, in cond
    orig_res_t, res_t = context_t.BuildCondBranch(true_fn)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\ops\control_flow_ops.py", line 1895, in BuildCondBranch
    original_result = fn()
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\keras\layers\core.py", line 144, in dropped_inputs
    seed=self.seed)
  File "C:\Users\filip\Anaconda3\envs\IoTwins\lib\site-packages\tensorflow\python\ops\nn_ops.py", line 2314, in dropout
    "range (0, 1], got %g" % keep_prob)
ValueError: keep_prob must be a scalar tensor or a float in the range (0, 1], got 0

Process finished with exit code 1
